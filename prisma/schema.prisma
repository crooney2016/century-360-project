// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                String    @id @default(cuid())
  ItemNumber        String    @unique @map("ItemNumber")
  Name              String    @map("Name")
  Dept              String    @map("Dept")
  Class             String    @map("Class")
  RetailPriceMin    String    @map("RetailPriceMin") // Changed to String as requested
  RetailPriceMax    String    @map("RetailPriceMax") // Changed to String as requested
  WholesalePriceMin String    @map("WholesalePriceMin") // Changed to String as requested
  WholesalePriceMax String    @map("WholesalePriceMax") // Changed to String as requested
  CreatedAt         DateTime  @default(now()) @map("CreatedAt")
  UpdatedAt         DateTime  @updatedAt @map("UpdatedAt")
  variants          Variant[]

  @@map("Products")
}

model Variant {
  id             String   @id @default(cuid())
  ItemNumber     String   @map("ItemNumber")
  SkuId          String   @unique @map("SkuId")
  Color          String   @map("Color")
  Size           String   @map("Size")
  RetailPrice    Decimal  @map("RetailPrice") @db.Decimal(10, 2) // Keep as Decimal for actual SKU prices
  WholesalePrice Decimal  @map("WholesalePrice") @db.Decimal(10, 2) // Keep as Decimal for actual SKU prices
  OnHandQty      Int      @map("OnHandQty")
  CreatedAt      DateTime @default(now()) @map("CreatedAt")
  UpdatedAt      DateTime @updatedAt @map("UpdatedAt")
  product        Product  @relation(fields: [ItemNumber], references: [ItemNumber])
  // Making these optional for now to avoid foreign key constraints during seeding
  // colorDimension ColorDimension? @relation(fields: [Color], references: [Name])
  // sizeDimension  SizeDimension?  @relation(fields: [Size], references: [Name])

  @@map("Variants")
}

model ColorDimension {
  id        String   @id @default(cuid())
  Name      String   @unique @map("Name")
  CreatedAt DateTime @default(now()) @map("CreatedAt")
  UpdatedAt DateTime @updatedAt @map("UpdatedAt")
  // variants  Variant[]

  @@map("ColorDimensions")
}

model SizeDimension {
  id        String   @id @default(cuid())
  Name      String   @unique @map("Name")
  CreatedAt DateTime @default(now()) @map("CreatedAt")
  UpdatedAt DateTime @updatedAt @map("UpdatedAt")
  // variants  Variant[]

  @@map("SizeDimensions")
}

// User Management
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  firstName      String?
  lastName       String?
  hashedPassword String?
  isActive       Boolean   @default(true)
  role           UserRole  @default(CUSTOMER)
  emailVerified  Boolean   @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  profile  UserProfile?
  orders   Order[]
  sessions UserSession[]

  @@map("Users")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
  CUSTOMER
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  phone       String?
  dateOfBirth DateTime?
  avatar      String?
  bio         String?
  company     String?
  jobTitle    String?
  website     String?

  // Address fields
  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String? @default("US")

  // Preferences
  preferredLanguage  String? @default("en")
  timezone           String? @default("America/New_York")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserProfiles")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserSessions")
}

// Order Management
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  userId        String?
  customerEmail String
  customerName  String
  status        OrderStatus @default(PENDING)

  // Totals
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @db.Decimal(10, 2)
  shippingAmount Decimal @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  totalAmount    Decimal @db.Decimal(10, 2)

  // Shipping Address
  shippingName       String
  shippingStreet     String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String @default("US")

  // Billing Address
  billingName       String
  billingStreet     String
  billingCity       String
  billingState      String
  billingPostalCode String
  billingCountry    String @default("US")

  // Metadata
  notes          String?
  trackingNumber String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  cancelledAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user     User?       @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payments Payment[]

  @@map("Orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?

  // Product snapshot at time of order
  itemNumber  String
  productName String
  variantSku  String?
  color       String?
  size        String?

  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("OrderItems")
}

// Payment Management
model Payment {
  id       String        @id @default(cuid())
  orderId  String
  amount   Decimal       @db.Decimal(10, 2)
  currency String        @default("USD")
  status   PaymentStatus @default(PENDING)
  method   PaymentMethod

  // Payment processor data
  processorId   String? // Stripe payment intent ID, etc.
  processorData Json? // Store additional processor-specific data

  failureReason String?
  processedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("Payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CASH
  CHECK
}
