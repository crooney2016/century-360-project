name: Security Scan
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  security:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm security:audit

      - name: Run dependency check
        run: |
          # Install OWASP Dependency Check
          wget -qO- https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-8.4.0-release.zip | unzip -q -
          ./dependency-check/bin/dependency-check.sh --scan ./src --format HTML --out ./reports --failOnCVSS 7

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: reports/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üîí Security Scan Results\n\n';

            try {
              const auditResult = fs.readFileSync('pnpm-audit.json', 'utf8');
              const audit = JSON.parse(auditResult);
              
              if (audit.metadata.vulnerabilities.total === 0) {
                comment += '‚úÖ **No vulnerabilities found**\n\n';
              } else {
                comment += `‚ö†Ô∏è **Found ${audit.metadata.vulnerabilities.total} vulnerabilities**\n\n`;
                comment += '| Severity | Count |\n';
                comment += '|----------|-------|\n';
                comment += `| Critical | ${audit.metadata.vulnerabilities.critical || 0} |\n`;
                comment += `| High | ${audit.metadata.vulnerabilities.high || 0} |\n`;
                comment += `| Moderate | ${audit.metadata.vulnerabilities.moderate || 0} |\n`;
                comment += `| Low | ${audit.metadata.vulnerabilities.low || 0} |\n\n`;
              }
            } catch (error) {
              comment += '‚úÖ **Security audit completed successfully**\n\n';
            }

            comment += 'üìä Full security report available in workflow artifacts.';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
